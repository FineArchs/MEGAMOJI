{"version":3,"file":"gifworker.js","mappings":";;;;;;;;;AAAA;AACA,kEAAkE,YAAY;AAC9E;AACA;AACA,6BAA6B,iCAAiC;AAC9D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,sBAAsB,gBAAgB;AACtC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,eAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,cAAc;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iBAAiB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,aAAa;AAC3B;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,aAAa;AAC3B;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,yBAAyB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,oBAAoB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B,mDAAmD,IAAI;AACnF;AACA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,oBAAoB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,oBAAoB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,wBAAwB;AAC1C;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B;AAC5B,SAAS,qCAAqC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,UAAU;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,sBAAsB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UCxzBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACN4D;AAE5D,qFAAqF;AACrF,MAAM,GAAG,GAAW,IAAW,CAAC;AAEhC,MAAM,OAAO,GAAG,kDAAU,EAAE,CAAC;AAE7B,GAAG,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,EAAE;IACtC,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE;QACrB,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;QACtE,MAAM,OAAO,GAAG,gDAAQ,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC;QAClE,MAAM,KAAK,GAAG,oDAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC1C,OAAO,CAAC,UAAU,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,CAAC;KAC3E;SAAM,IAAI,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE;QAC1B,OAAO,CAAC,MAAM,EAAE,CAAC;QACjB,GAAG,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;KACrE;AACH,CAAC,CAAC,CAAC","sources":["webpack:///./node_modules/gifenc/dist/gifenc.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/gifworker.ts"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", {value: true});\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, {get: all[name], enumerable: true});\n};\n\n// src/index.js\n__markAsModule(exports);\n__export(exports, {\n  GIFEncoder: () => GIFEncoder,\n  applyPalette: () => applyPalette,\n  default: () => src_default,\n  nearestColor: () => nearestColor,\n  nearestColorIndex: () => nearestColorIndex,\n  nearestColorIndexWithDistance: () => nearestColorIndexWithDistance,\n  prequantize: () => prequantize,\n  quantize: () => quantize,\n  snapColorsToPalette: () => snapColorsToPalette\n});\n\n// src/constants.js\nvar constants_default = {\n  signature: \"GIF\",\n  version: \"89a\",\n  trailer: 59,\n  extensionIntroducer: 33,\n  applicationExtensionLabel: 255,\n  graphicControlExtensionLabel: 249,\n  imageSeparator: 44,\n  signatureSize: 3,\n  versionSize: 3,\n  globalColorTableFlagMask: 128,\n  colorResolutionMask: 112,\n  sortFlagMask: 8,\n  globalColorTableSizeMask: 7,\n  applicationIdentifierSize: 8,\n  applicationAuthCodeSize: 3,\n  disposalMethodMask: 28,\n  userInputFlagMask: 2,\n  transparentColorFlagMask: 1,\n  localColorTableFlagMask: 128,\n  interlaceFlagMask: 64,\n  idSortFlagMask: 32,\n  localColorTableSizeMask: 7\n};\n\n// src/stream.js\nfunction createStream(initialCapacity = 256) {\n  let cursor = 0;\n  let contents = new Uint8Array(initialCapacity);\n  return {\n    get buffer() {\n      return contents.buffer;\n    },\n    reset() {\n      cursor = 0;\n    },\n    bytesView() {\n      return contents.subarray(0, cursor);\n    },\n    bytes() {\n      return contents.slice(0, cursor);\n    },\n    writeByte(byte) {\n      expand(cursor + 1);\n      contents[cursor] = byte;\n      cursor++;\n    },\n    writeBytes(data, offset = 0, byteLength = data.length) {\n      expand(cursor + byteLength);\n      for (let i = 0; i < byteLength; i++) {\n        contents[cursor++] = data[i + offset];\n      }\n    },\n    writeBytesView(data, offset = 0, byteLength = data.byteLength) {\n      expand(cursor + byteLength);\n      contents.set(data.subarray(offset, offset + byteLength), cursor);\n      cursor += byteLength;\n    }\n  };\n  function expand(newCapacity) {\n    var prevCapacity = contents.length;\n    if (prevCapacity >= newCapacity)\n      return;\n    var CAPACITY_DOUBLING_MAX = 1024 * 1024;\n    newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) >>> 0);\n    if (prevCapacity != 0)\n      newCapacity = Math.max(newCapacity, 256);\n    const oldContents = contents;\n    contents = new Uint8Array(newCapacity);\n    if (cursor > 0)\n      contents.set(oldContents.subarray(0, cursor), 0);\n  }\n}\n\n// src/lzwEncode.js\nvar BITS = 12;\nvar DEFAULT_HSIZE = 5003;\nvar MASKS = [\n  0,\n  1,\n  3,\n  7,\n  15,\n  31,\n  63,\n  127,\n  255,\n  511,\n  1023,\n  2047,\n  4095,\n  8191,\n  16383,\n  32767,\n  65535\n];\nfunction lzwEncode(width, height, pixels, colorDepth, outStream = createStream(512), accum = new Uint8Array(256), htab = new Int32Array(DEFAULT_HSIZE), codetab = new Int32Array(DEFAULT_HSIZE)) {\n  const hsize = htab.length;\n  const initCodeSize = Math.max(2, colorDepth);\n  accum.fill(0);\n  codetab.fill(0);\n  htab.fill(-1);\n  let cur_accum = 0;\n  let cur_bits = 0;\n  const init_bits = initCodeSize + 1;\n  const g_init_bits = init_bits;\n  let clear_flg = false;\n  let n_bits = g_init_bits;\n  let maxcode = (1 << n_bits) - 1;\n  const ClearCode = 1 << init_bits - 1;\n  const EOFCode = ClearCode + 1;\n  let free_ent = ClearCode + 2;\n  let a_count = 0;\n  let ent = pixels[0];\n  let hshift = 0;\n  for (let fcode = hsize; fcode < 65536; fcode *= 2) {\n    ++hshift;\n  }\n  hshift = 8 - hshift;\n  outStream.writeByte(initCodeSize);\n  output(ClearCode);\n  const length = pixels.length;\n  for (let idx = 1; idx < length; idx++) {\n    next_block: {\n      const c = pixels[idx];\n      const fcode = (c << BITS) + ent;\n      let i = c << hshift ^ ent;\n      if (htab[i] === fcode) {\n        ent = codetab[i];\n        break next_block;\n      }\n      const disp = i === 0 ? 1 : hsize - i;\n      while (htab[i] >= 0) {\n        i -= disp;\n        if (i < 0)\n          i += hsize;\n        if (htab[i] === fcode) {\n          ent = codetab[i];\n          break next_block;\n        }\n      }\n      output(ent);\n      ent = c;\n      if (free_ent < 1 << BITS) {\n        codetab[i] = free_ent++;\n        htab[i] = fcode;\n      } else {\n        htab.fill(-1);\n        free_ent = ClearCode + 2;\n        clear_flg = true;\n        output(ClearCode);\n      }\n    }\n  }\n  output(ent);\n  output(EOFCode);\n  outStream.writeByte(0);\n  return outStream.bytesView();\n  function output(code) {\n    cur_accum &= MASKS[cur_bits];\n    if (cur_bits > 0)\n      cur_accum |= code << cur_bits;\n    else\n      cur_accum = code;\n    cur_bits += n_bits;\n    while (cur_bits >= 8) {\n      accum[a_count++] = cur_accum & 255;\n      if (a_count >= 254) {\n        outStream.writeByte(a_count);\n        outStream.writeBytesView(accum, 0, a_count);\n        a_count = 0;\n      }\n      cur_accum >>= 8;\n      cur_bits -= 8;\n    }\n    if (free_ent > maxcode || clear_flg) {\n      if (clear_flg) {\n        n_bits = g_init_bits;\n        maxcode = (1 << n_bits) - 1;\n        clear_flg = false;\n      } else {\n        ++n_bits;\n        maxcode = n_bits === BITS ? 1 << n_bits : (1 << n_bits) - 1;\n      }\n    }\n    if (code == EOFCode) {\n      while (cur_bits > 0) {\n        accum[a_count++] = cur_accum & 255;\n        if (a_count >= 254) {\n          outStream.writeByte(a_count);\n          outStream.writeBytesView(accum, 0, a_count);\n          a_count = 0;\n        }\n        cur_accum >>= 8;\n        cur_bits -= 8;\n      }\n      if (a_count > 0) {\n        outStream.writeByte(a_count);\n        outStream.writeBytesView(accum, 0, a_count);\n        a_count = 0;\n      }\n    }\n  }\n}\nvar lzwEncode_default = lzwEncode;\n\n// src/rgb-packing.js\nfunction rgb888_to_rgb565(r, g, b) {\n  return r << 8 & 63488 | g << 2 & 992 | b >> 3;\n}\nfunction rgba8888_to_rgba4444(r, g, b, a) {\n  return r >> 4 | g & 240 | (b & 240) << 4 | (a & 240) << 8;\n}\nfunction rgb888_to_rgb444(r, g, b) {\n  return r >> 4 << 8 | g & 240 | b >> 4;\n}\n\n// src/pnnquant2.js\nfunction clamp(value, min, max) {\n  return value < min ? min : value > max ? max : value;\n}\nfunction sqr(value) {\n  return value * value;\n}\nfunction find_nn(bins, idx, hasAlpha) {\n  var nn = 0;\n  var err = 1e100;\n  const bin1 = bins[idx];\n  const n1 = bin1.cnt;\n  const wa = bin1.ac;\n  const wr = bin1.rc;\n  const wg = bin1.gc;\n  const wb = bin1.bc;\n  for (var i = bin1.fw; i != 0; i = bins[i].fw) {\n    const bin = bins[i];\n    const n2 = bin.cnt;\n    const nerr2 = n1 * n2 / (n1 + n2);\n    if (nerr2 >= err)\n      continue;\n    var nerr = 0;\n    if (hasAlpha) {\n      nerr += nerr2 * sqr(bin.ac - wa);\n      if (nerr >= err)\n        continue;\n    }\n    nerr += nerr2 * sqr(bin.rc - wr);\n    if (nerr >= err)\n      continue;\n    nerr += nerr2 * sqr(bin.gc - wg);\n    if (nerr >= err)\n      continue;\n    nerr += nerr2 * sqr(bin.bc - wb);\n    if (nerr >= err)\n      continue;\n    err = nerr;\n    nn = i;\n  }\n  bin1.err = err;\n  bin1.nn = nn;\n}\nfunction create_bin() {\n  return {\n    ac: 0,\n    rc: 0,\n    gc: 0,\n    bc: 0,\n    cnt: 0,\n    nn: 0,\n    fw: 0,\n    bk: 0,\n    tm: 0,\n    mtm: 0,\n    err: 0\n  };\n}\nfunction create_bin_list(data, format) {\n  const bincount = format === \"rgb444\" ? 4096 : 65536;\n  const bins = new Array(bincount);\n  const size = data.length;\n  if (format === \"rgba4444\") {\n    for (let i = 0; i < size; ++i) {\n      const color = data[i];\n      const a = color >> 24 & 255;\n      const b = color >> 16 & 255;\n      const g = color >> 8 & 255;\n      const r = color & 255;\n      const index = rgba8888_to_rgba4444(r, g, b, a);\n      let bin = index in bins ? bins[index] : bins[index] = create_bin();\n      bin.rc += r;\n      bin.gc += g;\n      bin.bc += b;\n      bin.ac += a;\n      bin.cnt++;\n    }\n  } else if (format === \"rgb444\") {\n    for (let i = 0; i < size; ++i) {\n      const color = data[i];\n      const b = color >> 16 & 255;\n      const g = color >> 8 & 255;\n      const r = color & 255;\n      const index = rgb888_to_rgb444(r, g, b);\n      let bin = index in bins ? bins[index] : bins[index] = create_bin();\n      bin.rc += r;\n      bin.gc += g;\n      bin.bc += b;\n      bin.cnt++;\n    }\n  } else {\n    for (let i = 0; i < size; ++i) {\n      const color = data[i];\n      const b = color >> 16 & 255;\n      const g = color >> 8 & 255;\n      const r = color & 255;\n      const index = rgb888_to_rgb565(r, g, b);\n      let bin = index in bins ? bins[index] : bins[index] = create_bin();\n      bin.rc += r;\n      bin.gc += g;\n      bin.bc += b;\n      bin.cnt++;\n    }\n  }\n  return bins;\n}\nfunction quantize(rgba, maxColors, opts = {}) {\n  const {\n    format = \"rgb565\",\n    clearAlpha = true,\n    clearAlphaColor = 0,\n    clearAlphaThreshold = 0,\n    oneBitAlpha = false\n  } = opts;\n  if (!rgba || !rgba.buffer) {\n    throw new Error(\"quantize() expected RGBA Uint8Array data\");\n  }\n  if (!(rgba instanceof Uint8Array) && !(rgba instanceof Uint8ClampedArray)) {\n    throw new Error(\"quantize() expected RGBA Uint8Array data\");\n  }\n  const data = new Uint32Array(rgba.buffer);\n  let useSqrt = opts.useSqrt !== false;\n  const hasAlpha = format === \"rgba4444\";\n  const bins = create_bin_list(data, format);\n  const bincount = bins.length;\n  const bincountMinusOne = bincount - 1;\n  const heap = new Uint32Array(bincount + 1);\n  var maxbins = 0;\n  for (var i = 0; i < bincount; ++i) {\n    const bin = bins[i];\n    if (bin != null) {\n      var d = 1 / bin.cnt;\n      if (hasAlpha)\n        bin.ac *= d;\n      bin.rc *= d;\n      bin.gc *= d;\n      bin.bc *= d;\n      bins[maxbins++] = bin;\n    }\n  }\n  if (sqr(maxColors) / maxbins < 0.022) {\n    useSqrt = false;\n  }\n  var i = 0;\n  for (; i < maxbins - 1; ++i) {\n    bins[i].fw = i + 1;\n    bins[i + 1].bk = i;\n    if (useSqrt)\n      bins[i].cnt = Math.sqrt(bins[i].cnt);\n  }\n  if (useSqrt)\n    bins[i].cnt = Math.sqrt(bins[i].cnt);\n  var h, l, l2;\n  for (i = 0; i < maxbins; ++i) {\n    find_nn(bins, i, false);\n    var err = bins[i].err;\n    for (l = ++heap[0]; l > 1; l = l2) {\n      l2 = l >> 1;\n      if (bins[h = heap[l2]].err <= err)\n        break;\n      heap[l] = h;\n    }\n    heap[l] = i;\n  }\n  var extbins = maxbins - maxColors;\n  for (i = 0; i < extbins; ) {\n    var tb;\n    for (; ; ) {\n      var b1 = heap[1];\n      tb = bins[b1];\n      if (tb.tm >= tb.mtm && bins[tb.nn].mtm <= tb.tm)\n        break;\n      if (tb.mtm == bincountMinusOne)\n        b1 = heap[1] = heap[heap[0]--];\n      else {\n        find_nn(bins, b1, false);\n        tb.tm = i;\n      }\n      var err = bins[b1].err;\n      for (l = 1; (l2 = l + l) <= heap[0]; l = l2) {\n        if (l2 < heap[0] && bins[heap[l2]].err > bins[heap[l2 + 1]].err)\n          l2++;\n        if (err <= bins[h = heap[l2]].err)\n          break;\n        heap[l] = h;\n      }\n      heap[l] = b1;\n    }\n    var nb = bins[tb.nn];\n    var n1 = tb.cnt;\n    var n2 = nb.cnt;\n    var d = 1 / (n1 + n2);\n    if (hasAlpha)\n      tb.ac = d * (n1 * tb.ac + n2 * nb.ac);\n    tb.rc = d * (n1 * tb.rc + n2 * nb.rc);\n    tb.gc = d * (n1 * tb.gc + n2 * nb.gc);\n    tb.bc = d * (n1 * tb.bc + n2 * nb.bc);\n    tb.cnt += nb.cnt;\n    tb.mtm = ++i;\n    bins[nb.bk].fw = nb.fw;\n    bins[nb.fw].bk = nb.bk;\n    nb.mtm = bincountMinusOne;\n  }\n  let palette = [];\n  var k = 0;\n  for (i = 0; ; ++k) {\n    let r = clamp(Math.round(bins[i].rc), 0, 255);\n    let g = clamp(Math.round(bins[i].gc), 0, 255);\n    let b = clamp(Math.round(bins[i].bc), 0, 255);\n    let a = 255;\n    if (hasAlpha) {\n      a = clamp(Math.round(bins[i].ac), 0, 255);\n      if (oneBitAlpha) {\n        const threshold = typeof oneBitAlpha === \"number\" ? oneBitAlpha : 127;\n        a = a <= threshold ? 0 : 255;\n      }\n      if (clearAlpha && a <= clearAlphaThreshold) {\n        r = g = b = clearAlphaColor;\n        a = 0;\n      }\n    }\n    const color = hasAlpha ? [r, g, b, a] : [r, g, b];\n    const exists = existsInPalette(palette, color);\n    if (!exists)\n      palette.push(color);\n    if ((i = bins[i].fw) == 0)\n      break;\n  }\n  return palette;\n}\nfunction existsInPalette(palette, color) {\n  for (let i = 0; i < palette.length; i++) {\n    const p = palette[i];\n    let matchesRGB = p[0] === color[0] && p[1] === color[1] && p[2] === color[2];\n    let matchesAlpha = p.length >= 4 && color.length >= 4 ? p[3] === color[3] : true;\n    if (matchesRGB && matchesAlpha)\n      return true;\n  }\n  return false;\n}\n\n// src/color.js\nfunction euclideanDistanceSquared(a, b) {\n  var sum = 0;\n  var n;\n  for (n = 0; n < a.length; n++) {\n    const dx = a[n] - b[n];\n    sum += dx * dx;\n  }\n  return sum;\n}\n\n// src/palettize.js\nfunction roundStep(byte, step) {\n  return step > 1 ? Math.round(byte / step) * step : byte;\n}\nfunction prequantize(rgba, {roundRGB = 5, roundAlpha = 10, oneBitAlpha = null} = {}) {\n  const data = new Uint32Array(rgba.buffer);\n  for (let i = 0; i < data.length; i++) {\n    const color = data[i];\n    let a = color >> 24 & 255;\n    let b = color >> 16 & 255;\n    let g = color >> 8 & 255;\n    let r = color & 255;\n    a = roundStep(a, roundAlpha);\n    if (oneBitAlpha) {\n      const threshold = typeof oneBitAlpha === \"number\" ? oneBitAlpha : 127;\n      a = a <= threshold ? 0 : 255;\n    }\n    r = roundStep(r, roundRGB);\n    g = roundStep(g, roundRGB);\n    b = roundStep(b, roundRGB);\n    data[i] = a << 24 | b << 16 | g << 8 | r << 0;\n  }\n}\nfunction applyPalette(rgba, palette, format = \"rgb565\") {\n  if (!rgba || !rgba.buffer) {\n    throw new Error(\"quantize() expected RGBA Uint8Array data\");\n  }\n  if (!(rgba instanceof Uint8Array) && !(rgba instanceof Uint8ClampedArray)) {\n    throw new Error(\"quantize() expected RGBA Uint8Array data\");\n  }\n  if (palette.length > 256) {\n    throw new Error(\"applyPalette() only works with 256 colors or less\");\n  }\n  const data = new Uint32Array(rgba.buffer);\n  const length = data.length;\n  const bincount = format === \"rgb444\" ? 4096 : 65536;\n  const index = new Uint8Array(length);\n  const cache = new Array(bincount);\n  const hasAlpha = format === \"rgba4444\";\n  if (format === \"rgba4444\") {\n    for (let i = 0; i < length; i++) {\n      const color = data[i];\n      const a = color >> 24 & 255;\n      const b = color >> 16 & 255;\n      const g = color >> 8 & 255;\n      const r = color & 255;\n      const key = rgba8888_to_rgba4444(r, g, b, a);\n      const idx = key in cache ? cache[key] : cache[key] = nearestColorIndexRGBA(r, g, b, a, palette);\n      index[i] = idx;\n    }\n  } else {\n    const rgb888_to_key = format === \"rgb444\" ? rgb888_to_rgb444 : rgb888_to_rgb565;\n    for (let i = 0; i < length; i++) {\n      const color = data[i];\n      const b = color >> 16 & 255;\n      const g = color >> 8 & 255;\n      const r = color & 255;\n      const key = rgb888_to_key(r, g, b);\n      const idx = key in cache ? cache[key] : cache[key] = nearestColorIndexRGB(r, g, b, palette);\n      index[i] = idx;\n    }\n  }\n  return index;\n}\nfunction nearestColorIndexRGBA(r, g, b, a, palette) {\n  let k = 0;\n  let mindist = 1e100;\n  for (let i = 0; i < palette.length; i++) {\n    const px2 = palette[i];\n    const a2 = px2[3];\n    let curdist = sqr2(a2 - a);\n    if (curdist > mindist)\n      continue;\n    const r2 = px2[0];\n    curdist += sqr2(r2 - r);\n    if (curdist > mindist)\n      continue;\n    const g2 = px2[1];\n    curdist += sqr2(g2 - g);\n    if (curdist > mindist)\n      continue;\n    const b2 = px2[2];\n    curdist += sqr2(b2 - b);\n    if (curdist > mindist)\n      continue;\n    mindist = curdist;\n    k = i;\n  }\n  return k;\n}\nfunction nearestColorIndexRGB(r, g, b, palette) {\n  let k = 0;\n  let mindist = 1e100;\n  for (let i = 0; i < palette.length; i++) {\n    const px2 = palette[i];\n    const r2 = px2[0];\n    let curdist = sqr2(r2 - r);\n    if (curdist > mindist)\n      continue;\n    const g2 = px2[1];\n    curdist += sqr2(g2 - g);\n    if (curdist > mindist)\n      continue;\n    const b2 = px2[2];\n    curdist += sqr2(b2 - b);\n    if (curdist > mindist)\n      continue;\n    mindist = curdist;\n    k = i;\n  }\n  return k;\n}\nfunction snapColorsToPalette(palette, knownColors, threshold = 5) {\n  if (!palette.length || !knownColors.length)\n    return;\n  const paletteRGB = palette.map((p) => p.slice(0, 3));\n  const thresholdSq = threshold * threshold;\n  const dim = palette[0].length;\n  for (let i = 0; i < knownColors.length; i++) {\n    let color = knownColors[i];\n    if (color.length < dim) {\n      color = [color[0], color[1], color[2], 255];\n    } else if (color.length > dim) {\n      color = color.slice(0, 3);\n    } else {\n      color = color.slice();\n    }\n    const r = nearestColorIndexWithDistance(paletteRGB, color.slice(0, 3), euclideanDistanceSquared);\n    const idx = r[0];\n    const distanceSq = r[1];\n    if (distanceSq > 0 && distanceSq <= thresholdSq) {\n      palette[idx] = color;\n    }\n  }\n}\nfunction sqr2(a) {\n  return a * a;\n}\nfunction nearestColorIndex(colors, pixel, distanceFn = euclideanDistanceSquared) {\n  let minDist = Infinity;\n  let minDistIndex = -1;\n  for (let j = 0; j < colors.length; j++) {\n    const paletteColor = colors[j];\n    const dist = distanceFn(pixel, paletteColor);\n    if (dist < minDist) {\n      minDist = dist;\n      minDistIndex = j;\n    }\n  }\n  return minDistIndex;\n}\nfunction nearestColorIndexWithDistance(colors, pixel, distanceFn = euclideanDistanceSquared) {\n  let minDist = Infinity;\n  let minDistIndex = -1;\n  for (let j = 0; j < colors.length; j++) {\n    const paletteColor = colors[j];\n    const dist = distanceFn(pixel, paletteColor);\n    if (dist < minDist) {\n      minDist = dist;\n      minDistIndex = j;\n    }\n  }\n  return [minDistIndex, minDist];\n}\nfunction nearestColor(colors, pixel, distanceFn = euclideanDistanceSquared) {\n  return colors[nearestColorIndex(colors, pixel, distanceFn)];\n}\n\n// src/index.js\nfunction GIFEncoder(opt = {}) {\n  const {initialCapacity = 4096, auto = true} = opt;\n  const stream = createStream(initialCapacity);\n  const HSIZE = 5003;\n  const accum = new Uint8Array(256);\n  const htab = new Int32Array(HSIZE);\n  const codetab = new Int32Array(HSIZE);\n  let hasInit = false;\n  return {\n    reset() {\n      stream.reset();\n      hasInit = false;\n    },\n    finish() {\n      stream.writeByte(constants_default.trailer);\n    },\n    bytes() {\n      return stream.bytes();\n    },\n    bytesView() {\n      return stream.bytesView();\n    },\n    get buffer() {\n      return stream.buffer;\n    },\n    get stream() {\n      return stream;\n    },\n    writeHeader,\n    writeFrame(index, width, height, opts = {}) {\n      const {\n        transparent = false,\n        transparentIndex = 0,\n        delay = 0,\n        palette = null,\n        repeat = 0,\n        colorDepth = 8,\n        dispose = -1\n      } = opts;\n      let first = false;\n      if (auto) {\n        if (!hasInit) {\n          first = true;\n          writeHeader();\n          hasInit = true;\n        }\n      } else {\n        first = Boolean(opts.first);\n      }\n      width = Math.max(0, Math.floor(width));\n      height = Math.max(0, Math.floor(height));\n      if (first) {\n        if (!palette) {\n          throw new Error(\"First frame must include a { palette } option\");\n        }\n        encodeLogicalScreenDescriptor(stream, width, height, palette, colorDepth);\n        encodeColorTable(stream, palette);\n        if (repeat >= 0) {\n          encodeNetscapeExt(stream, repeat);\n        }\n      }\n      const delayTime = Math.round(delay / 10);\n      encodeGraphicControlExt(stream, dispose, delayTime, transparent, transparentIndex);\n      const useLocalColorTable = Boolean(palette) && !first;\n      encodeImageDescriptor(stream, width, height, useLocalColorTable ? palette : null);\n      if (useLocalColorTable)\n        encodeColorTable(stream, palette);\n      encodePixels(stream, index, width, height, colorDepth, accum, htab, codetab);\n    }\n  };\n  function writeHeader() {\n    writeUTFBytes(stream, \"GIF89a\");\n  }\n}\nfunction encodeGraphicControlExt(stream, dispose, delay, transparent, transparentIndex) {\n  stream.writeByte(33);\n  stream.writeByte(249);\n  stream.writeByte(4);\n  if (transparentIndex < 0) {\n    transparentIndex = 0;\n    transparent = false;\n  }\n  var transp, disp;\n  if (!transparent) {\n    transp = 0;\n    disp = 0;\n  } else {\n    transp = 1;\n    disp = 2;\n  }\n  if (dispose >= 0) {\n    disp = dispose & 7;\n  }\n  disp <<= 2;\n  const userInput = 0;\n  stream.writeByte(0 | disp | userInput | transp);\n  writeUInt16(stream, delay);\n  stream.writeByte(transparentIndex || 0);\n  stream.writeByte(0);\n}\nfunction encodeLogicalScreenDescriptor(stream, width, height, palette, colorDepth = 8) {\n  const globalColorTableFlag = 1;\n  const sortFlag = 0;\n  const globalColorTableSize = colorTableSize(palette.length) - 1;\n  const fields = globalColorTableFlag << 7 | colorDepth - 1 << 4 | sortFlag << 3 | globalColorTableSize;\n  const backgroundColorIndex = 0;\n  const pixelAspectRatio = 0;\n  writeUInt16(stream, width);\n  writeUInt16(stream, height);\n  stream.writeBytes([fields, backgroundColorIndex, pixelAspectRatio]);\n}\nfunction encodeNetscapeExt(stream, repeat) {\n  stream.writeByte(33);\n  stream.writeByte(255);\n  stream.writeByte(11);\n  writeUTFBytes(stream, \"NETSCAPE2.0\");\n  stream.writeByte(3);\n  stream.writeByte(1);\n  writeUInt16(stream, repeat);\n  stream.writeByte(0);\n}\nfunction encodeColorTable(stream, palette) {\n  const colorTableLength = 1 << colorTableSize(palette.length);\n  for (let i = 0; i < colorTableLength; i++) {\n    let color = [0, 0, 0];\n    if (i < palette.length) {\n      color = palette[i];\n    }\n    stream.writeByte(color[0]);\n    stream.writeByte(color[1]);\n    stream.writeByte(color[2]);\n  }\n}\nfunction encodeImageDescriptor(stream, width, height, localPalette) {\n  stream.writeByte(44);\n  writeUInt16(stream, 0);\n  writeUInt16(stream, 0);\n  writeUInt16(stream, width);\n  writeUInt16(stream, height);\n  if (localPalette) {\n    const interlace = 0;\n    const sorted = 0;\n    const palSize = colorTableSize(localPalette.length) - 1;\n    stream.writeByte(128 | interlace | sorted | 0 | palSize);\n  } else {\n    stream.writeByte(0);\n  }\n}\nfunction encodePixels(stream, index, width, height, colorDepth = 8, accum, htab, codetab) {\n  lzwEncode_default(width, height, index, colorDepth, stream, accum, htab, codetab);\n}\nfunction writeUInt16(stream, short) {\n  stream.writeByte(short & 255);\n  stream.writeByte(short >> 8 & 255);\n}\nfunction writeUTFBytes(stream, text) {\n  for (var i = 0; i < text.length; i++) {\n    stream.writeByte(text.charCodeAt(i));\n  }\n}\nfunction colorTableSize(length) {\n  return Math.max(Math.ceil(Math.log2(length)), 1);\n}\nvar src_default = GIFEncoder;\n//# sourceMappingURL=gifenc.js.map\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { GIFEncoder, quantize, applyPalette } from \"gifenc\";\n\n// eslint-disable-next-line no-restricted-globals, @typescript-eslint/no-explicit-any\nconst ctx: Worker = self as any;\n\nconst encoder = GIFEncoder();\n\nctx.addEventListener(\"message\", (msg) => {\n  if (msg.data.addFrame) {\n    const { data, transparent, width, height, delay } = msg.data.addFrame;\n    const palette = quantize(data, 256, { oneBitAlpha: transparent });\n    const index = applyPalette(data, palette);\n    encoder.writeFrame(index, width, height, { palette, delay, transparent });\n  } else if (msg.data.finish) {\n    encoder.finish();\n    ctx.postMessage(new Blob([encoder.bytes()], { type: \"image/gif\" }));\n  }\n});\n"],"names":[],"sourceRoot":""}